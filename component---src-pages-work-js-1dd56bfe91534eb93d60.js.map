{"version":3,"sources":["webpack:///./src/components/work-link.js","webpack:///./src/pages/work.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/footer.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["PostLink","_ref","post","react_default","a","createElement","gatsby_browser_entry","to","frontmatter","path","title","__webpack_require__","d","__webpack_exports__","pageQuery","WorkPage","projects","data","allMarkdownRemark","edges","filter","edge","node","map","work_link","key","id","layout","seo","keywords","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","props","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","Footer","className","Date","getFullYear","href","Header","siteTitle","activeClassName","Layout","Fragment","header","footer"],"mappings":"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","file":"component---src-pages-work-js-1dd56bfe91534eb93d60.js","sourcesContent":["import { Link } from \"gatsby\"\nimport React from \"react\"\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n  </div>\n)\n\nexport default PostLink\n","import { graphql } from \"gatsby\"\nimport React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport WorkLink from \"../components/work-link\"\n\nconst WorkPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const projects = edges\n    .filter(edge => !!edge.node.frontmatter.title) // You can filter your posts based on some criteria\n    .map(edge => <WorkLink key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <SEO\n        keywords={[\"developer\", \"software engineer\", \"projects\"]}\n        title=\"Work\"\n      />\n      <section>{projects}</section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___title] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default WorkPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from \"react\"\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <section>\n      <div>&copy; {new Date().getFullYear()}</div>\n      <div>\n        Built with <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </div>\n    </section>\n    <section>\n      <a href=\"https://www.github.com/iverum\">Github</a>\n      <a href=\"https://www.linkedin.com/in/blakehair/\">LinkedIn</a>\n      <a href=\"https://www.twitter.com/iverum\">Twitter</a>\n    </section>\n  </footer>\n)\n\nexport default Footer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"header\">\n    <div className=\"nav\">\n      <h1>\n        <Link to=\"/\">{siteTitle}</Link>\n      </h1>\n    </div>\n    <div className=\"subnav\">\n      <span>\n        <Link activeClassName=\"is-active\" to=\"/work\">\n          Work\n        </Link>\n      </span>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nimport Footer from \"./footer\"\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <>\n    <Header siteTitle=\"/iverum\" />\n    <div className=\"content\">\n      <main>{children}</main>\n    </div>\n    <Footer />\n  </>\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}